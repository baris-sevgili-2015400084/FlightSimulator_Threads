
#include <pthread.h>
#include <stdio.h>
#include <unistd.h>
#include <stdbool.h>
#include <stdlib.h>


void *Client(void *param); 		//client thread
void *Server(void *param); 		//server thread

int *isAvailable;		//an array, isAvailable[i]=1 denotes (i+1)th seat is not picked from a client yet, is available to be picked
int total_seats;		//denotes the total number of seats

pthread_mutex_t m = PTHREAD_MUTEX_INITIALIZER;		//initializing the mutex

FILE *_file;			//the output file

struct pars{			//struct to keep seat number and client id in it

	int seat_num;		//seat number
	int cli_id;		//client id

};

int main(int argc, char *argv[]){

	//opening the output file
	_file = fopen("output.txt", "w");
	if (_file == NULL){
    		printf("Error opening file!\n");
    		exit(1);
	}

	int i;
	int num_of_seats =atoi(argv[1]);	//first command line argument is loaded as total number of seats
	total_seats=num_of_seats;
	
	
	isAvailable = (int*) malloc(sizeof(int)*num_of_seats);	//allocating memory for our array
	for (i = 0; i < num_of_seats; i++){
		isAvailable[i] = 1;		//initializing isAvailable, all ones
	}
	
	fprintf(_file, "Number of total seats: %d\n", num_of_seats);
	
	srand(time(NULL));			//seeding the random number generator
	
	pthread_t tid[num_of_seats]; 	/* the thread identifier */
	pthread_attr_t attr; 		/* set of attributes for the thread */
	pthread_attr_init(&attr);	/* get the default attributes */
	
	/* creating the threads (Clients), in total number of seats times */
	for (i = 0; i < num_of_seats; i++){ 
	
		struct pars *str = (struct pars *)malloc(sizeof(struct pars));	//allocating memoray, for struct of each client thread seperately, setting seat_num and cli_id
		str->seat_num=0;		
		str->cli_id=i;		
	
		pthread_create(&tid[i],&attr,Client,(void *)str);		//creating the Client thread, passing it the pointer of the struct
	}
	
	/* Now join on each thread */
	for (i = 0; i < num_of_seats; i++) 		//thread waits for thread to terminate
		pthread_join(tid[i], NULL);
		
	fprintf(_file, "All seats are reserved.");	//if all seats are reserved, prints out
		
}

/**
 * The Client thread begins control in this function, we passed it a struct when creating it
 */
void *Client(void *param) 
{
	
	sleep(((rand() %151)+50)/1000);		//thread sleeps for [150-200] milliseconds
		
	pthread_t s;			/* the thread identifier */
	pthread_attr_t attr;		/* set of attributes for the thread */
	pthread_attr_init(&attr);	/* get the default attributes */
	
	pthread_create(&s, &attr, Server, (void *)param);	//creating the Server thread, passing it the pointer of the struct

	struct pars *data1 =  (struct pars*)param;		//in order to be able to use the values in the struct, we made necessary arrangements
	
	do{
		int rand_seat= rand() % total_seats;		//picks a random number between [0-(#totalseats-1)]
		pthread_mutex_lock(&m);				//activates mutex lock, since we will touch to the shared data from now on
		
		if(isAvailable[rand_seat]==1){			//checks whether the selected random seat is reserved before
					
			data1->cli_id;				//sets the cli_id and seat number of the current struct as current values
			data1->seat_num=rand_seat+1;
			isAvailable[rand_seat]=0;		//sets available to false, since we reserved that seat
			pthread_mutex_unlock(&m);		//unlocks the mutex since we wont in contact with any shared data for this thread
		
			break;
		}else{						//if the random seat is reserved, unlocks the mutex and repeats picking a random seat
			pthread_mutex_unlock(&m);
		
		}			
	}while(1);
	
	pthread_join(s, NULL);
	pthread_exit(0);
}

void *Server(void *param) 		//the Server thread 
{
	
	struct pars *data =  (struct pars*)param;
	
	while(data->seat_num==0);	//checks whether client found an available seat, if not stays in busy waiting

	fprintf(_file, "Client%d reserves Seat%d\n", data->cli_id+1, data->seat_num);	//if client founded an available seat, printouts it as reserved
					//we can reach the necessary data values via the struct pointer, that we passed in when creating the Server thread
	
	pthread_exit(0);
}

